#summary Description of the framework

=== This is a working draft. The framework is not released yet ===

= Introduction =

Over time I have created this mini-framework which helps you to easily setup a flash website. The framework makes use of `SWFAddress` for deeplinking and `TweenLite` for transitions. When you need to create small/medium websites with deeplinking and page transitions, this mini-framework could help you develop faster. I mostly used it for custom projects like viral websites. The best of this mini-framework is the simplicity (no need to learn hard design-patterns, just straight-forward) and I believe you just develop faster because you don't have to develop about a page setup or start from scratch, but keeps freedom to build the site which satisfies your needs.

= Features =

These are the features of the framework
  * Global page creation
  * Deeplinking made easy: it's included and no need to worry about it anymore.
  * Page class with overridable states. 
  * Alternative navigation (button) system
    * Easy linking
  * Global Event dispatching+listening system
  * Automatic Event removal system   
  * Transition between pages 
    * Xustom transitions are possible. This keeps your freedom of expression and makes it usable for every custom project. Just implement ITransition.
  * Global page settings
    * Transition in/out between page
    * Easing/time customizable
    * Alignment options
    * All settings can be overrided on page level
  
= Tutorial =

=== How to use ===

Before starting, you should know a few things: how to create link classes to MovieClips, and the basics from ActionScript 3. I really recommend to use Flash just for the graphics (link it to classes, export as SWC), and use an external AS editor for ultimate coding-fun. 

=== Step 1: Create flashfile  ===

Just to start, create a new flash file. Save it and place the framework files next to the flash, or create your own setup where the framework is included. Make sure you include TweenLite and SWFAddress too. Now we need to design some pages.

=== Step 2: Create Pages ===
 Create a MovieClip called `HomePageVC`. Draw a square in it (about 500x400 px) and add some text and a title called 'Home'. Imaging this is your homepage. The centerpoint of the page should be on the top left. Find the `MovieClip` in your library and go to the linkage screen (right-click). Choose "_export for ActionScript_". In the _class_  input you should enter `HomePageVC` and the base class should be `nl.stroep.framework.Page`. You are now extending the Page class. Create 2 other pages, called `ContactPageVC` and `InfoPageVC`, all should extend `nl.stroep.framework.Page`. You now have 3 pages, ready to be used.

=== Step 3: Create Document class ===
Create a `Main.as` and place it in the root of your project, and use this as document-root . If you are creating a AS-only project, mark this file as 'always compile'.

Note: This is the most simple usage of the framework. There are more settings available.
{{{
package
{
	import flash.display.Sprite;
	import nl.stroep.framework.PageFactory;

	public class Main extends Sprite 
	{		
		private var pageFactory:PageFactory;
		private var pageHolder:Sprite = new Sprite();
		
		public function Main():void 
		{
			pageFactory = new PageFactory();
						
			// add your pages here
			pageFactory.add( "/home", HomePageVC );
			pageFactory.add( "/contact", ContactPageVC );
			pageFactory.add( "/info", InfoPageVC );
			
			addChild( pageFactory.view = pageHolder );
						
			// load intropage
			pageFactory.init();
		}
	}
}
}}}

It would be better to create a `Pages.as` file, which contains constants with all paths. This is very useful when pointing at multiple places to the same page.
{{{
package
{
	public class Pages
	{
		public static const HOME_PAGE:String = "/home";
		public static const CONTACT_PAGE:String = "/contact";
		public static const INFO_PAGE:String = "/info";
	}
}
}}}

=== Step 4: Create simple navigation ===

Now you have 3 pages ready to be used. You need some navigation buttons to navigate through the pages. Create 3 buttons for each page (home, contact, info). Find the buttons in your library and go to the linkage screen (right-click). Choose "_export for ActionScript_". In the _class_ input you should enter `HomePageButtonVC` and the base class should be `nl.stroep.framework.navigation.NavigationButton`. Apply this rule for all buttons, they should all extend `nl.stroep.framework.navigation.NavigationButton`. Place the buttons in the root, on the stage and give them the _instance names_ 'buttonHome', 'buttonInfo', 'buttonContact'.

Go to your `Main.as`. Replace all code to this code:

{{{
package
{
	import flash.display.Sprite;
	import nl.stroep.framework.PageFactory;
	import nl.stroep.framework.navigation.NavigationButton;

	public class Main extends Sprite 
	{		
		private var pageFactory:PageFactory;
		private var pageHolder:Sprite = new Sprite();
		// stage instances
		public var buttonHome:NavigationButton;
		public var buttonInfo:NavigationButton;
		public var buttonContact:NavigationButton;

		public function Main():void 
		{
			pageFactory = new PageFactory();
						
			// add your pages here
			pageFactory.add( Pages.HOME_PAGE, HomePageVC );
			pageFactory.add( Pages.CONTACT_PAGE, ContactPageVC );
			pageFactory.add( Pages.INFO_PAGE, InfoPageVC );			
			
			// add page holder to stage, link it to pageFactory
			addChild( pageFactory.view = pageHolder );
						
			// load fist page
			pageFactory.init();

			initButtons();
		}

		private function initButtons():void 
		{
			buttonHome.click(Pages.HOME_PAGE);
			buttonInfo.click(Pages.INFO_PAGE);
			buttonContact.click(Pages.CONTACT_PAGE);
		}
	}
}
}}}
Run the movie; you should have a clickable+working "website" with navigation and deeplinking. If you don't want to use the NavigationButton from the framework you can also call `PageFactory.gotoPage(Pages.HOME_PAGE)` from any point inside your application.

=== Step 5: Customize settings + add Transitions ===
Lets manipulate the default settings and add a Slide transition (fading in from left). The animation-in effect should have an `Elastic.easeOut` and should take 1 second. The animation-out effect should be an `Strong.EaseIn` and should take 0.7 seconds. Note the easing functions are used from `TweenLite`.

{{{
package
{
	import flash.display.Sprite;
	import com.greensock.easing.Elastic;
	import com.greensock.easing.Strong;
	import nl.stroep.framework.PageFactory;
	import nl.stroep.framework.PageSettings;
	import nl.stroep.framework.navigation.NavigationButton;

	public class Main extends Sprite 
	{		
		private var pageFactory:PageFactory;
		private var pageHolder:Sprite = new Sprite();
		// stage instances
		public var buttonHome:NavigationButton;
		public var buttonInfo:NavigationButton;
		public var buttonContact:NavigationButton;

		public function Main():void 
		{
			pageFactory = new PageFactory();
						
			// add your pages here
			pageFactory.add( Pages.HOME_PAGE, HomePageVC );
			pageFactory.add( Pages.CONTACT_PAGE, ContactPageVC );
			pageFactory.add( Pages.INFO_PAGE, InfoPageVC );			
			
			pageFactory.defaultSettings = new PageSettings( 
					new SlideTransition(), 
					Elastic.easeOut, 
					Strong.easeIn, 
					1,
					0.7
				);
			// add page holder to stage, link it to pageFactory
			addChild( pageFactory.view = pageHolder );
						
			// load fist page
			pageFactory.init();

			initButtons();
		}

		private function initButtons():void 
		{
			buttonHome.click(Pages.HOME_PAGE);
			buttonInfo.click(Pages.INFO_PAGE);
			buttonContact.click(Pages.CONTACT_PAGE);
		}
	}
}
}}}

If you now run the flashfile, you should have a website with buttons, transition and deeplinking. There are a few transitions build in the framework (`BlurTransition`, `FadeTransition`, `SlideTransition` and `WeirdTransition`), and some of them have some customizable options (see auto-completion / online docs). 

----

= Navigation Button =

The framework includes a `NavigationButton` class. This is a semi-intelligent MovieClip. 

=== Smart states ===
You can add framelabels called _'out', 'over', 'down' and/or 'active'_. The button will automatically add the needed events for that, and `gotoAndPlay()` to that framelabel. If you extend the class, you can basically add your button-state-animation and it should work Do not forget to set a `stop()` commando at the end of each button-state-animation. 

=== Grouping ===
If you have multiple buttons, you can group them, to create an active state. Just pass a name (String) of the group to all buttons using the `group`-property. If you click on one member of the group, it will `gotoAndPlay()` to framelabel '_active_' if exist. This should make it easy to create simple buttons with cool states.

=== Click functions ===
But that is not it. The `NavigationButton` class is very easy to configure. There is a `click` function, which should basically cover all types of button-click-functions you would ever create. See code below for the divers navigation button possibilities.
{{{
import nl.stroep.framework.navigation.NavigationButton;
import nl.stroep.framework.navigation.ButtonTypes;

// link to normal page inside application
myButton.click(Pages.HOME_PAGE);

// link to normal page inside application (equivalent)
myButton.click(Pages.HOME_PAGE, ButtonTypes.INTERNAL);

// link to external url outside the flash application. default target='_blank'
myButton.click("http://www.google.nl/", ButtonTypes.EXTERNAL);

// link to external url outside the flash application, with other target
myButton.click("http://www.google.nl/", ButtonTypes.EXTERNAL, "_self");

// link to javascript function (it's using ExternalInterface)
myButton.click("myJavascriptFunc", ButtonTypes.JAVASCRIPT);

// link to javascript function with parameters
myButton.click("alert", ButtonTypes.JAVASCRIPT, "Works like a charm");

// link to javascript function with multiple parameters
myButton.click("myJavascriptFunc", ButtonTypes.JAVASCRIPT, "param 1", "param 2", "param 3");

// link to function 'sayHello' inside flashapplication
myButton.click(sayHello, ButtonTypes.FUNCTION);

function sayHello(){ 
  trace("Hello!") 
}

// link to function 'sayHelloTo' inside flashapplication with parameters
myButton.click(sayHelloTo, ButtonTypes.FUNCTION, "Mark", "Knol");

function sayHelloTo( firstName:String, lastName:String ){ 
  trace("Hello " + firstName + " " + lastName );
}

}}}
It is even possible to dispatch global events. You can use the `EventCenter.getInstance()` to listen to them. Note; inside the `Page`-classes there is already an reference to the EventCenter Singleton, it is named `eventcenter`.
{{{
// OPTION 1. dispatch event without parameters (type only, thats always required)
myButton.click(MyCustomEvent, ButtonTypes.GLOBAL_EVENT, "SAY_HELLO");

// anywhere else inside the application you could receive the event
EventCenter.addEventListener(MyCustomEvent.SAY_HELLO, onSayHello);
function onSayHello( e:MyCustomEvent ):void { trace('say hello') }

// OPTION 2. dispatch event with parameters
myButton.click(MyCustomEvent, ButtonTypes.GLOBAL_EVENT, "SAY_HELLO", "Mark");

// Anywhere else inside the application you could receive the event
EventCenter.getInstance().addEventListener(MyCustomEvent.SAY_HELLO, onSayHello);
function onSayHello( e:MyCustomEvent ):void { trace('Hello' + e.firstName) }

// example custom event: MyCustomEvent.as
package 
{
	import flash.events.Event;
	public class MyCustomEvent extends Event 
	{
		public static const SAY_HELLO:String = "SAY_HELLO";
		
		private var _firstName:String;
		
		public function MyCustomEvent(type:String, firstname:String, bubbles:Boolean=false, cancelable:Boolean=false) 
		{ 
			super(type, bubbles, cancelable);
			this._firstName = firstname;
		} 
		public function get firstName():String { return _firstName; }
	}
}
}}}